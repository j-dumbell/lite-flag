/*
Liteflag API

Testing FlagsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_FlagsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FlagsAPIService FlagsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlagsAPI.FlagsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlagsAPIService FlagsKeyDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string

		httpRes, err := apiClient.FlagsAPI.FlagsKeyDelete(context.Background(), key).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlagsAPIService FlagsKeyGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string

		resp, httpRes, err := apiClient.FlagsAPI.FlagsKeyGet(context.Background(), key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlagsAPIService FlagsKeyPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string

		resp, httpRes, err := apiClient.FlagsAPI.FlagsKeyPut(context.Background(), key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlagsAPIService FlagsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlagsAPI.FlagsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
