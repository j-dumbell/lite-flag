openapi: 3.0.3
info:
  description: API for managing feature flags.
  title: Liteflag API
  version: 1.0.0
servers:
- description: Production server
  url: https://api.example.com/v1
security:
- ApiKeyAuth: []
paths:
  /healthz:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
          description: API healthy
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
          description: API unhealthy
      summary: API healthcheck
      tags:
      - healthz
  /flags:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Flag'
                type: array
          description: A list of feature flags
      summary: Retrieve all feature flags
      tags:
      - flags
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flag'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flag'
          description: Flag created successfully
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid input
        "409":
          description: Flag with the given key already exists
      security:
      - ApiKeyAuth: []
      summary: Create a new feature flag
      tags:
      - flags
  /flags/{key}:
    delete:
      parameters:
      - description: Unique key of the feature flag
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Flag deleted successfully
        "404":
          description: Flag not found
      summary: Delete a feature flag
      tags:
      - flags
    get:
      parameters:
      - description: Unique key of the feature flag
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flag'
          description: The feature flag
        "403":
          description: Forbidden
        "404":
          description: Flag not found
      summary: Retrieve a single feature flag by key
      tags:
      - flags
    put:
      parameters:
      - description: Unique key of the feature flag
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlagInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flag'
          description: Flag updated successfully
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid input
        "404":
          description: Flag not found
      summary: Update an existing feature flag
      tags:
      - flags
  /api-keys:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: API key created successfully
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid input
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                type: object
          description: Forbidden
        "409":
          description: API key with the given name already exists
      security:
      - ApiKeyAuth: []
      summary: Create a new API key
      tags:
      - API keys
  /api-keys/{name}:
    delete:
      parameters:
      - description: Name of the API key
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Deleted API key
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                type: object
          description: Forbidden
        "404":
          description: API key not found
      security:
      - ApiKeyAuth: []
      summary: Delete an API key
      tags:
      - API keys
  /api-keys/{name}/rotate:
    post:
      parameters:
      - description: Name of the API key
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: Rotated API key
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                type: object
          description: Forbidden
        "404":
          description: API key not found
      security:
      - ApiKeyAuth: []
      summary: Rotate an API key
      tags:
      - API keys
components:
  responses:
    NotFound:
      description: Entity not found.
    BadRequest:
      description: Bad request.
    Conflict:
      description: Conflict with existing data.
  schemas:
    HealthResponse:
      example:
        database: true
      properties:
        database:
          description: Whether the database is healthy
          type: boolean
      required:
      - database
      type: object
    Flag:
      example:
        isPublic: true
        type: boolean
        value: true
        key: key
      properties:
        key:
          description: Unique identifier for the feature flag
          type: string
        type:
          description: Type of the flag value
          enum:
          - boolean
          - string
          type: string
        isPublic:
          description: Whether or not the flag is public.
          type: boolean
        value:
          $ref: '#/components/schemas/Flag_value'
      required:
      - isPublic
      - key
      - type
      - value
      type: object
    ApiKey:
      example:
        role: root
        name: name
        key: key
      properties:
        name:
          description: Unique identifier for the API key
          type: string
        role:
          description: The associated permissions of the key
          enum:
          - root
          - admin
          - readonly
          type: string
        key:
          description: The API Key
          type: string
      required:
      - key
      - name
      - role
      type: object
    ApiKeyInput:
      example:
        role: root
        name: name
      properties:
        name:
          description: Unique identifier for the API key
          type: string
        role:
          description: The associated permissions of the key
          enum:
          - root
          - admin
          - readonly
          type: string
      required:
      - name
      - role
      type: object
    FlagInput:
      example:
        isPublic: true
        type: boolean
        value: true
      properties:
        isPublic:
          description: Whether the feature flag is public or not
          type: boolean
        type:
          description: Type of the flag value
          enum:
          - boolean
          - string
          type: string
        value:
          $ref: '#/components/schemas/Flag_value'
      required:
      - isPublic
      - type
      - value
      type: object
    Flag_value:
      description: "Value of the flag, must match the type"
      oneOf:
      - type: boolean
      - type: string
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: X-API-KEY
      type: apiKey
